// The distinction between "layout" and "formatting" is as follows: If the resulting CCS affects the placement of and/or visibility of multiple items, it is done here. If the CSS affects only the appearance of an item, then it appears in "formatting". Of course the appearance may affect the layout, so there is no hard distinction.


@mixin narrow-layout {
	@media screen and (min-width: 0px) and (max-width: $narrow-max-width) {
		@content
	}
}

@mixin medium-layout {
	@media screen and (min-width: $medium-min-width) and (max-width: $medium-max-width) {
		@content
	}
}

@mixin wide-layout {
	@media screen and (min-width: $wide-min-width) {
		@content
	}
}

// Layout top-to-bottom for the top level
// This arranges the navbanner-panel, column-panel, footer-separator and footer-panel (from "default.html")
.body-panel {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
}

// The navigation & banner
// Note: these two have to be together to enable a RDW design with an input/label in the banner area.
.navbanner-panel {

	// Use the flex layout rules.
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: flex-start;

	// The size of the title depends on the width of the window.
	.navbanner-title {
	
		// The title area should take up all space not used by the menu label.
		flex-grow: 1;

		// Center the title if visible
		@if ($navbanner-include-banner == true) { display: flex; } @else { display: none }
		justify-content: center;
		align-items: center;
	}

	// The menu label is only visible in narrow and medium layout.
	.navbanner-label {
		
		// Never grow the menu label (symbol)
		flex-grow: 0;

		// The menu label (symbol) should be centered if visible
		@if ($navbanner-include-banner == true) { display: flex; } @else { display: none }
		justify-content: center;
		align-items: center;

		// The label is used as checkbox-label, it should show a pointer when the mouse is above it.
		label {
			p:after { content: $menu-symbol-code; } // Set the menu symbol
			cursor: pointer;
		}
	}

	// The dividers should run accross the entire window. Note that they are not always visible, that depends on the active layout.
	.nav-top-divider { width: 100%; }
	.nav-bottom-divider { width: 100%; }
	
	// The menu is always the entire width.
	.navbanner-menu { width: 100%; }
	
	@include narrow-layout {

		// Override visibility of the label 
		@if ($navbanner-include-banner == false) { .navbanner-label, .navbanner-title { display: flex; } }

		// Disabled items.
		.navbanner-menu, .nav-bottom-divider, input, .menu-item-separator { display: none; }
		
		// Conditionally visible/invisible items (conditionally on the invisible checkbox, i.e. menu symbol)
		input:checked ~ {
		
			// Display the menu only when the menu-checkbox (invisible) is checked.
			.navbanner-menu { display: block; }
			
			// Do not display the top divider when the menu is visible.
			.nav-top-divider { display: none; }
		}

		// Only visible when the menu symbol invisible checkbox is selected
		.navbanner-menu {
		
			// For the top level list (menu) items
			li {

				// Disable submenu by default
				ul { display: none; }

				// When the submenu is closed, show the appropriate symbol
				label .menu-item .menu-item-symbol p:after { content: $menu-closed-submenu-code; }

				// If the checkbox is checked
				input:checked ~ {

					// Show submenu
					ul { display: block; }

					// When the submenu is open, show the appropriate symbol
					label .menu-item .menu-item-symbol p:after { content: $menu-open-submenu-code; }
				}

				// Ensure that the whole width and height of a link is clickable
				a { display: block; }	
			}

			// Use the flex layout for the menu items
			.menu-item, .menu-subitem {
			
				display: flex;
				flex-direction: row;

				// Align all items in the center
				align-items: center;

				// Fix the display property for the menu item symbol and title area's when a <p> is included
				.menu-item-symbol { p { display: inline; } }
		
				// The symbol area does not grow
				.menu-item-symbol, .menu-subitem-symbol { flex-grow: 0; width: 3 * $hspacing-unit; }

				// The title area must grow
				.menu-item-title, .menu-subitem-title { flex-grow: 1; }
			}
		}
	}

	@include medium-layout {

		// Disabled items
		.navbanner-menu, input, .menu-item-symbol, .menu-subitem-symbol, .nav-bottom-divider { display: none; }

		
		// Conditional visibility of the menu bar		
		@if ($navbanner-include-banner == false) {
				
			// Display the menu because the input checkbox (label) in the banner is never visible.
			.navbanner-menu {
			
				// Use flex to enable alignment of the top level menu items
				display: flex;
				flex-direction: row;
				flex-wrap: wrap;
				justify-content: $menu-alignment;
			}
			
			// Also display the bottom divider when the menu is visible.
			.nav-bottom-divider { display: inline; }
		}
		@else {
		
			// Conditionally visible/invisible items (conditionally on the invisible checkbox, i.e. menu symbol)
			input:checked ~ {
		
				// Display the menu only when the menu-checkbox (invisible) is checked.
				.navbanner-menu {
			
					// Use flex to enable alignment of the top level menu items
					display: flex;
					flex-direction: row;
					flex-wrap: wrap;
					justify-content: $menu-alignment;
				}
			
				// Also display the bottom divider when the menu is visible.
				.nav-bottom-divider { display: inline; }
			}
		}

		.navbanner-menu {

			// Create a left and right spacing
			border-left: ($navbar-side-margin - ($navbar-menu-item-spacing / 2)) solid transparent;
			border-right: $navbar-side-margin solid transparent;

			// Menu item spacing
			.menu-item {
				border-left: ($navbar-menu-item-spacing / 2) solid transparent;
				border-right: ($navbar-menu-item-spacing / 2) solid transparent;
			}
			.menu-item-separator p:after { content: $menu-item-separator; }

			// This menu is horizontal
			.menu-item, .menu-item-separator, .menu-item-title, menu-subitem-title {
				display: inline;
				p { display: inline; } // Keeps the labels in-line with the links
			}
			
			ul {
				li {
					// This menu is horizontal
					display: inline-block;
					
					// The submenu display
					ul {
						display: none; // Initially disabled
						position: absolute; // Display the submenu below the corresponding menu item
						li { display: block; } // Makes the submenu vertical
					}

					// Display the submenu if the user hovers the mouse over it
					&:hover ul { display: block; }

					// Display the submenu if the user taps the corresponding menu item
					input:checked ~ ul { display: block; }
				}
			}
		}
	}

	@include wide-layout {

		// Do not show the checkbox label, the input(s) and the menu symbols
		.navbanner-label, input, .menu-item-symbol { display: none; }
		
		.navbanner-menu {
		
			// Use flex to enable alignment of the top level menu items
			display: flex;
			flex-direction: row;
			flex-wrap: wrap;
			justify-content: $menu-alignment;

			// Create a left and right spacing
			border-left: ($navbar-side-margin - ($navbar-menu-item-spacing / 2)) solid transparent;
			border-right: $navbar-side-margin solid transparent;
			
			// Menu item spacing
			.menu-item {
				border-left: ($navbar-menu-item-spacing / 2) solid transparent;
				border-right: ($navbar-menu-item-spacing / 2) solid transparent;
			}
			.menu-item-separator p:after { content: $menu-item-separator; }

			// This menu is horizontal
			.menu-item, .menu-item-separator, .menu-item-title, menu-subitem-title {
				display: inline;
				p { display: inline; }
			}

			ul {
				li {
					
					// This menu is horizontal
					display: inline-block;
					
					// The submenu display
					ul {
						display: none; // Initially disabled
						position: absolute; // Display the submenu below the corresponding menu item
						li { display: block; } // Makes the submenu vertical
					}

					// Display the submenu if the user hovers the mouse over it
					&:hover ul { display: block; }

					// Display the submenu if the user taps the corresponding menu item
					input:checked ~ ul { display: block; }
				}
			}
		}
	}
}


// The layout for the column panel uses flex, but lays out the columns either column or row based depending on the size of the window (screen).
.column-panel {

	// Use flex, layout as a row or column, based on the screenwidth
	display: flex;
		
	@include narrow-layout {
	
		// This layout is column based, i.e. the content is displayed over one another.
		flex-direction: column;
				
		// The primary column must be displayed on top, use the 'order' property to enforce this.
		.primary-column { order: 1; }

		// The secondary column is put below the primary the second place
		.secondary-column { order: 2; }

		// Unused		
		.tertiary-column, .secondary-divider, .tertiary-divider { display: none; }
	}
	
	@include medium-layout {
		
		// This layout is row based
		flex-direction: row;
		
		// The secondary column uses a fixed witdh and hosts both the secondary and tertiary column content
		.secondary-column { width: $secondary-column-width; }

		// The primary column can grow
		.primary-column { flex: 1 1 auto; width: 1px; } // A width must be specified

		// Unused
		.tertiary-divider, .secondary-widget-divider, .tertiary-column { display: none; }
	}
	
	@include wide-layout {
	
		// This layout is row based
		flex-direction: row;
		
		// The secondary and tertiary columns uses a fixed witdh 
		.secondary-column { width: $secondary-column-width; }
		.tertiary-column { width: $tertiary-column-width; }
							
		// The primary column can grow
		.primary-column { flex: 1 1 auto; width: 1px; } // A width must be specified

		// Unused
		.secondary-column .tertiary-column-content, .tertiary-widget-divider, .secondary-widget-divider { display: none }
	}
}
